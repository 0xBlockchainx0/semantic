{-# LANGUAGE CPP #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE QuantifiedConstraints #-}
{-# LANGUAGE StandaloneDeriving #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE UndecidableInstances #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}

module Language.JSON.AST (module Language.JSON.AST) where

-- Language definition for JSON, generated by ast-generate. Do not edit!
import qualified AST.Parse
import qualified AST.Token
import qualified AST.Traversable1.Class
import qualified AST.Unmarshal
import qualified Data.Foldable
import qualified Data.List as Data.OldList
import qualified Data.Maybe as GHC.Maybe
import qualified Data.Text.Internal
import qualified Data.Traversable
import qualified GHC.Base
import qualified GHC.Generics
import qualified GHC.Records
import qualified GHC.Show
import qualified TreeSitter.Node
import qualified Prelude as GHC.Classes

debugSymbolNames :: [GHC.Base.String]
debugSymbolNames = debugSymbolNames_0

debugSymbolNames_0 :: [GHC.Base.String]
debugSymbolNames_0 =
  [ "end",
    "_{",
    "_,",
    "_}",
    "_:",
    "_[",
    "_]",
    "_\"",
    "_string_content_token1",
    "escape_sequence",
    "number",
    "true",
    "false",
    "null",
    "document",
    "_value",
    "object",
    "pair",
    "array",
    "string",
    "string_content",
    "_object_repeat1",
    "_array_repeat1",
    "_string_content_repeat1"
  ]

newtype Value a = Value {getValue :: ((Array GHC.Generics.:+: False GHC.Generics.:+: Null GHC.Generics.:+: Number GHC.Generics.:+: Object GHC.Generics.:+: String GHC.Generics.:+: True) a)}
  deriving newtype (AST.Unmarshal.SymbolMatching)
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass (AST.Traversable1.Class.Traversable1 someConstraint)

instance GHC.Records.HasField "ann" (Value a_1) a_1 where
  getField = AST.Unmarshal.gann GHC.Base.. getValue

deriving instance GHC.Classes.Eq a_2 => GHC.Classes.Eq (Value a_2)

deriving instance GHC.Classes.Ord a_3 => GHC.Classes.Ord (Value a_3)

deriving instance GHC.Show.Show a_4 => GHC.Show.Show (Value a_4)

instance AST.Unmarshal.Unmarshal Value

instance Data.Foldable.Foldable Value where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor Value where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable Value where
  traverse = AST.Traversable1.Class.traverseDefault1

data Array a = Array {ann :: a, extraChildren :: ([AST.Parse.Err (Value a)])}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass (AST.Traversable1.Class.Traversable1 someConstraint)

instance AST.Unmarshal.SymbolMatching Array where
  matchedSymbols _ = [18]
  showFailure _ node_5 =
    "expected "
      GHC.Base.<> ( "array"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_5 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_5) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_6 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_7 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_8 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_9 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_6
        c1_7 = TreeSitter.Node.nodeStartPoint node_5
      TreeSitter.Node.TSPoint
        r2_8
        c2_9 = TreeSitter.Node.nodeEndPoint node_5

deriving instance GHC.Classes.Eq a_10 => GHC.Classes.Eq (Array a_10)

deriving instance GHC.Classes.Ord a_11 => GHC.Classes.Ord (Array a_11)

deriving instance GHC.Show.Show a_12 => GHC.Show.Show (Array a_12)

instance AST.Unmarshal.Unmarshal Array

instance Data.Foldable.Foldable Array where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor Array where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable Array where
  traverse = AST.Traversable1.Class.traverseDefault1

data Document a = Document {ann :: a, extraChildren :: (AST.Parse.Err (Value a))}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass (AST.Traversable1.Class.Traversable1 someConstraint)

instance AST.Unmarshal.SymbolMatching Document where
  matchedSymbols _ = [14]
  showFailure _ node_13 =
    "expected "
      GHC.Base.<> ( "document"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_13 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_13) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_14 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_15 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_16 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_17 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_14
        c1_15 = TreeSitter.Node.nodeStartPoint node_13
      TreeSitter.Node.TSPoint
        r2_16
        c2_17 = TreeSitter.Node.nodeEndPoint node_13

deriving instance GHC.Classes.Eq a_18 => GHC.Classes.Eq (Document a_18)

deriving instance GHC.Classes.Ord a_19 => GHC.Classes.Ord (Document a_19)

deriving instance GHC.Show.Show a_20 => GHC.Show.Show (Document a_20)

instance AST.Unmarshal.Unmarshal Document

instance Data.Foldable.Foldable Document where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor Document where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable Document where
  traverse = AST.Traversable1.Class.traverseDefault1

data Object a = Object {ann :: a, extraChildren :: ([AST.Parse.Err (Pair a)])}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass (AST.Traversable1.Class.Traversable1 someConstraint)

instance AST.Unmarshal.SymbolMatching Object where
  matchedSymbols _ = [16]
  showFailure _ node_21 =
    "expected "
      GHC.Base.<> ( "object"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_21 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_21) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_22 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_23 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_24 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_25 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_22
        c1_23 = TreeSitter.Node.nodeStartPoint node_21
      TreeSitter.Node.TSPoint
        r2_24
        c2_25 = TreeSitter.Node.nodeEndPoint node_21

deriving instance GHC.Classes.Eq a_26 => GHC.Classes.Eq (Object a_26)

deriving instance GHC.Classes.Ord a_27 => GHC.Classes.Ord (Object a_27)

deriving instance GHC.Show.Show a_28 => GHC.Show.Show (Object a_28)

instance AST.Unmarshal.Unmarshal Object

instance Data.Foldable.Foldable Object where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor Object where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable Object where
  traverse = AST.Traversable1.Class.traverseDefault1

data Pair a = Pair
  { ann :: a,
    value :: (AST.Parse.Err (Value a)),
    key :: (AST.Parse.Err ((Number GHC.Generics.:+: String) a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass (AST.Traversable1.Class.Traversable1 someConstraint)

instance AST.Unmarshal.SymbolMatching Pair where
  matchedSymbols _ = [17]
  showFailure _ node_29 =
    "expected "
      GHC.Base.<> ( "pair"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_29 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_29) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_30 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_31 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_32 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_33 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_30
        c1_31 = TreeSitter.Node.nodeStartPoint node_29
      TreeSitter.Node.TSPoint
        r2_32
        c2_33 = TreeSitter.Node.nodeEndPoint node_29

deriving instance GHC.Classes.Eq a_34 => GHC.Classes.Eq (Pair a_34)

deriving instance GHC.Classes.Ord a_35 => GHC.Classes.Ord (Pair a_35)

deriving instance GHC.Show.Show a_36 => GHC.Show.Show (Pair a_36)

instance AST.Unmarshal.Unmarshal Pair

instance Data.Foldable.Foldable Pair where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor Pair where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable Pair where
  traverse = AST.Traversable1.Class.traverseDefault1

data String a = String
  { ann :: a,
    extraChildren :: (GHC.Maybe.Maybe (AST.Parse.Err (StringContent a)))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass (AST.Traversable1.Class.Traversable1 someConstraint)

instance AST.Unmarshal.SymbolMatching String where
  matchedSymbols _ = [19]
  showFailure _ node_37 =
    "expected "
      GHC.Base.<> ( "string"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_37 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_37) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_38 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_39 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_40 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_41 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_38
        c1_39 = TreeSitter.Node.nodeStartPoint node_37
      TreeSitter.Node.TSPoint
        r2_40
        c2_41 = TreeSitter.Node.nodeEndPoint node_37

deriving instance GHC.Classes.Eq a_42 => GHC.Classes.Eq (String a_42)

deriving instance GHC.Classes.Ord a_43 => GHC.Classes.Ord (String a_43)

deriving instance GHC.Show.Show a_44 => GHC.Show.Show (String a_44)

instance AST.Unmarshal.Unmarshal String

instance Data.Foldable.Foldable String where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor String where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable String where
  traverse = AST.Traversable1.Class.traverseDefault1

data StringContent a = StringContent
  { ann :: a,
    extraChildren :: ([AST.Parse.Err (EscapeSequence a)])
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass (AST.Traversable1.Class.Traversable1 someConstraint)

instance AST.Unmarshal.SymbolMatching StringContent where
  matchedSymbols _ = [20]
  showFailure _ node_45 =
    "expected "
      GHC.Base.<> ( "string_content"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_45 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_45) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_46 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_47 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_48 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_49 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_46
        c1_47 = TreeSitter.Node.nodeStartPoint node_45
      TreeSitter.Node.TSPoint
        r2_48
        c2_49 = TreeSitter.Node.nodeEndPoint node_45

deriving instance GHC.Classes.Eq a_50 => GHC.Classes.Eq (StringContent a_50)

deriving instance GHC.Classes.Ord a_51 => GHC.Classes.Ord (StringContent a_51)

deriving instance GHC.Show.Show a_52 => GHC.Show.Show (StringContent a_52)

instance AST.Unmarshal.Unmarshal StringContent

instance Data.Foldable.Foldable StringContent where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor StringContent where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable StringContent where
  traverse = AST.Traversable1.Class.traverseDefault1

type AnonymousDQuote = AST.Token.Token "\"" 7

type AnonymousComma = AST.Token.Token "," 2

type AnonymousColon = AST.Token.Token ":" 4

type AnonymousLBracket = AST.Token.Token "[" 5

type AnonymousRBracket = AST.Token.Token "]" 6

data EscapeSequence a = EscapeSequence {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass (AST.Traversable1.Class.Traversable1 someConstraint)

instance AST.Unmarshal.SymbolMatching EscapeSequence where
  matchedSymbols _ = [9]
  showFailure _ node_53 =
    "expected "
      GHC.Base.<> ( "escape_sequence"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_53 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_53) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_54 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_55 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_56 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_57 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_54
        c1_55 = TreeSitter.Node.nodeStartPoint node_53
      TreeSitter.Node.TSPoint
        r2_56
        c2_57 = TreeSitter.Node.nodeEndPoint node_53

deriving instance GHC.Classes.Eq a_58 => GHC.Classes.Eq (EscapeSequence a_58)

deriving instance GHC.Classes.Ord a_59 => GHC.Classes.Ord (EscapeSequence a_59)

deriving instance GHC.Show.Show a_60 => GHC.Show.Show (EscapeSequence a_60)

instance AST.Unmarshal.Unmarshal EscapeSequence

instance Data.Foldable.Foldable EscapeSequence where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor EscapeSequence where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable EscapeSequence where
  traverse = AST.Traversable1.Class.traverseDefault1

data False a = False {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass (AST.Traversable1.Class.Traversable1 someConstraint)

instance AST.Unmarshal.SymbolMatching False where
  matchedSymbols _ = [12]
  showFailure _ node_61 =
    "expected "
      GHC.Base.<> ( "false"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_61 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_61) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_62 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_63 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_64 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_65 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_62
        c1_63 = TreeSitter.Node.nodeStartPoint node_61
      TreeSitter.Node.TSPoint
        r2_64
        c2_65 = TreeSitter.Node.nodeEndPoint node_61

deriving instance GHC.Classes.Eq a_66 => GHC.Classes.Eq (False a_66)

deriving instance GHC.Classes.Ord a_67 => GHC.Classes.Ord (False a_67)

deriving instance GHC.Show.Show a_68 => GHC.Show.Show (False a_68)

instance AST.Unmarshal.Unmarshal False

instance Data.Foldable.Foldable False where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor False where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable False where
  traverse = AST.Traversable1.Class.traverseDefault1

data Null a = Null {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass (AST.Traversable1.Class.Traversable1 someConstraint)

instance AST.Unmarshal.SymbolMatching Null where
  matchedSymbols _ = [13]
  showFailure _ node_69 =
    "expected "
      GHC.Base.<> ( "null"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_69 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_69) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_70 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_71 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_72 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_73 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_70
        c1_71 = TreeSitter.Node.nodeStartPoint node_69
      TreeSitter.Node.TSPoint
        r2_72
        c2_73 = TreeSitter.Node.nodeEndPoint node_69

deriving instance GHC.Classes.Eq a_74 => GHC.Classes.Eq (Null a_74)

deriving instance GHC.Classes.Ord a_75 => GHC.Classes.Ord (Null a_75)

deriving instance GHC.Show.Show a_76 => GHC.Show.Show (Null a_76)

instance AST.Unmarshal.Unmarshal Null

instance Data.Foldable.Foldable Null where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor Null where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable Null where
  traverse = AST.Traversable1.Class.traverseDefault1

data Number a = Number {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass (AST.Traversable1.Class.Traversable1 someConstraint)

instance AST.Unmarshal.SymbolMatching Number where
  matchedSymbols _ = [10]
  showFailure _ node_77 =
    "expected "
      GHC.Base.<> ( "number"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_77 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_77) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_78 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_79 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_80 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_81 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_78
        c1_79 = TreeSitter.Node.nodeStartPoint node_77
      TreeSitter.Node.TSPoint
        r2_80
        c2_81 = TreeSitter.Node.nodeEndPoint node_77

deriving instance GHC.Classes.Eq a_82 => GHC.Classes.Eq (Number a_82)

deriving instance GHC.Classes.Ord a_83 => GHC.Classes.Ord (Number a_83)

deriving instance GHC.Show.Show a_84 => GHC.Show.Show (Number a_84)

instance AST.Unmarshal.Unmarshal Number

instance Data.Foldable.Foldable Number where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor Number where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable Number where
  traverse = AST.Traversable1.Class.traverseDefault1

data True a = True {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass (AST.Traversable1.Class.Traversable1 someConstraint)

instance AST.Unmarshal.SymbolMatching True where
  matchedSymbols _ = [11]
  showFailure _ node_85 =
    "expected "
      GHC.Base.<> ( "true"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_85 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_85) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_86 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_87 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_88 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_89 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_86
        c1_87 = TreeSitter.Node.nodeStartPoint node_85
      TreeSitter.Node.TSPoint
        r2_88
        c2_89 = TreeSitter.Node.nodeEndPoint node_85

deriving instance GHC.Classes.Eq a_90 => GHC.Classes.Eq (True a_90)

deriving instance GHC.Classes.Ord a_91 => GHC.Classes.Ord (True a_91)

deriving instance GHC.Show.Show a_92 => GHC.Show.Show (True a_92)

instance AST.Unmarshal.Unmarshal True

instance Data.Foldable.Foldable True where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor True where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable True where
  traverse = AST.Traversable1.Class.traverseDefault1

type AnonymousLBrace = AST.Token.Token "{" 1

type AnonymousRBrace = AST.Token.Token "}" 3

